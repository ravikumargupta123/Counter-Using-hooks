{"version":3,"sources":["Components/CounterText.js","Components/CounterLoader.js","App.js","reportWebVitals.js","index.js"],"names":["CounterText","counter","className","CounterLoader","loading","App","useState","setCounter","setLoading","isFirstRender","useRef","console","log","updateCounter","a","fetch","method","body","JSON","stringify","counter1","Number","headers","response","json","useEffect","fetchCount","current","onClick","type","name","id","value","onChange","event","target","size","React","memo","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"yPAGe,SAASA,EAAT,GAAmC,IAAZC,EAAW,EAAXA,QACpC,OAAO,sBAAKC,UAAU,gBAAf,6BAAgDD,KCD1C,SAASE,EAAT,GAAqC,IAAZC,EAAW,EAAXA,QACtC,OACE,sBAAKF,UAAS,yBAAqBE,EAAqB,GAAX,UAA7C,UACE,sBAAMF,UAAU,WADlB,0B,MCKJ,SAASG,IACP,MAA8BC,mBAJT,GAIrB,mBAAOL,EAAP,KAAgBM,EAAhB,KACA,EAA8BD,oBAAS,GAAvC,mBAAOF,EAAP,KAAgBI,EAAhB,KACMC,EAAgBC,kBAAO,GAE7BC,QAAQC,IAAI,MAAOX,GAEnB,IAAMY,EAAa,uCAAG,8BAAAC,EAAA,6DACpBN,GAAW,GADS,SAECO,IACnB,8EACA,CACEC,OAAQ,MACRC,KAAMC,KAAKC,UAAU,CAAEC,SAAUC,OAAOpB,KACxCqB,QAAS,CAAE,eAAgB,sBAPX,cAEhBC,EAFgB,gBAUHA,EAASC,OAVN,OAUhBA,EAVgB,OAWpBjB,EAAWiB,EAAKJ,UAChBZ,GAAW,GAZS,2CAAH,qDAenBiB,qBAAU,WAAM,4CACd,8BAAAX,EAAA,sEACuBC,IACnB,+EAFJ,cACMQ,EADN,gBAImBA,EAASC,OAJ5B,OAIMA,EAJN,OAKEjB,EAAWiB,EAAKJ,UAChBZ,GAAW,GANb,4CADc,uBAAC,WAAD,wBASdkB,KACC,IAEHD,qBAAU,WACJhB,EAAckB,QAChBlB,EAAckB,SAAU,EAGrBvB,GACHS,MAED,CAACZ,IAoBJ,OACE,qCACE,cAACE,EAAD,CAAeC,QAASA,IACxB,sBAAKF,UAAU,mBAAf,UACE,wBAAQA,UAAU,YAAY0B,QAVlB,WAzDH,EA0DE3B,GAAWA,GACxBM,EAAWN,EAAU,IAQnB,SACE,uCAEF,uBACE4B,KAAK,OACLC,KAAK,UACLC,GAAG,UACHC,MAAO/B,EACPgC,SA9Ba,SAACC,GACdA,EAAMC,OAAOH,MA/CN,KAgDXzB,EAAW2B,EAAMC,OAAOH,QA6BpBI,KAAK,MAEP,wBAAQlC,UAAU,YAAY0B,QA3BlB,WACZ3B,EArDS,KAqDaA,GACxBM,EAAWN,EAAU,IAyBnB,SACE,0CAGJ,cAACD,EAAD,CAAaC,QAASA,OAKboC,UAAMC,KAAKjC,GCpFXkC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.33ef7df9.chunk.js","sourcesContent":["import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nexport default function CounterText({ counter }) {\n  return <div className=\"counter-value\">Counter Value : {counter}</div>;\n}\n\nCounterText.propTypes = {\n  counter: PropTypes.number || PropTypes.string,\n};\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nexport default function CounterLoader({ loading }) {\n  return (\n    <div className={`counter-loader ${!loading ? \"hidden\" : \"\"}`}>\n      <span className=\"loader\"></span>\n      Saving counter value\n    </div>\n  );\n}\n\nCounterLoader.propTypes = {\n  loading: PropTypes.bool,\n};\n","import React, { useState, useEffect, useRef } from \"react\";\nimport fetch from \"node-fetch\";\nimport CounterText from \"./Components/CounterText\";\nimport CounterLoader from \"./Components/CounterLoader\";\n\nimport \"./App.scss\";\n\nconst initialCounter = 1;\nconst maxCount = 1000;\nconst minCount = 1;\nfunction App() {\n  const [counter, setCounter] = useState(initialCounter);\n  const [loading, setLoading] = useState(true);\n  const isFirstRender = useRef(true);\n\n  console.log(\"APP\", counter);\n\n  const updateCounter = async () => {\n    setLoading(true);\n    let response = await fetch(\n      \"https://interview-8e4c5-default-rtdb.firebaseio.com/front-end/counter1.json\",\n      {\n        method: \"PUT\",\n        body: JSON.stringify({ counter1: Number(counter) }),\n        headers: { \"Content-Type\": \"application/json\" },\n      },\n    );\n    let json = await response.json();\n    setCounter(json.counter1);\n    setLoading(false);\n  };\n\n  useEffect(() => {\n    async function fetchCount() {\n      let response = await fetch(\n        \"https://interview-8e4c5-default-rtdb.firebaseio.com/front-end/counter1.json\",\n      );\n      let json = await response.json();\n      setCounter(json.counter1);\n      setLoading(false);\n    }\n    fetchCount();\n  }, []);\n\n  useEffect(() => {\n    if (isFirstRender.current) {\n      isFirstRender.current = false; // toggle flag after first render/mounting\n      return;\n    }\n    if (!loading) {\n      updateCounter();\n    }\n  }, [counter]);\n\n  const handleChange = (event) => {\n    if (!(event.target.value > maxCount)) {\n      setCounter(event.target.value);\n    }\n  };\n\n  const increment = () => {\n    if (counter < maxCount && counter) {\n      setCounter(counter + 1);\n    }\n  };\n\n  const decrement = () => {\n    if (minCount < counter && counter) {\n      setCounter(counter - 1);\n    }\n  };\n\n  return (\n    <>\n      <CounterLoader loading={loading}></CounterLoader>\n      <div className=\"counterContainer\">\n        <button className=\"decrement\" onClick={decrement}>\n          <span>-</span>\n        </button>\n        <input\n          type=\"text\"\n          name=\"counter\"\n          id=\"counter\"\n          value={counter}\n          onChange={handleChange}\n          size=\"1\"\n        />\n        <button className=\"increment\" onClick={increment}>\n          <span>+</span>\n        </button>\n      </div>\n      <CounterText counter={counter}></CounterText>\n    </>\n  );\n}\n\nexport default React.memo(App);\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\"),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}